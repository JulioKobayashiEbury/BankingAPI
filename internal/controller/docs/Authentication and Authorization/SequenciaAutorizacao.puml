@startuml
actor Client
boundary EchoServer
control AuthenticationService
control UserService

activate Client
Client -> EchoServer: 1. HTTP Request (e.g., GET /accounts/123, POST /users/auth)
activate EchoServer
alt No Authorization Header and no User Id provided
    alt The path is "/auth/token"
        EchoServer -> EchoServer: 2. next(c) to proceed with Authentication
    else The path is NOT "/auth/token"
        EchoServer -> Client: 2. 401 Unauthorized (authorization header is missing)
    end
else Any other request or /users/auth with Authorization Header
    EchoServer -> EchoServer: 2. Check if Authorization Header is missing
    alt Authorization Header Missing
        EchoServer --> Client: 3. 401 Unauthorized (Authorization header is missing)
    else Authorization Header Present
        EchoServer -> EchoServer: 4. Extract JWT Token from Authorization Header
        EchoServer -> EchoServer: 5. Authorize(tokenString) (Parse and validate token claims)
        EchoServer --> EchoServer: 6. Claims (if valid) or Error (if invalid)
        alt Token Invalid
            EchoServer --> Client: 7. 401 Unauthorized (token not valid)
        else Token Valid
            EchoServer -> UserService: 7. Get(claims.Id) (Get user details from DB)
            activate UserService
            UserService --> EchoServer: 8. User details or Error
            deactivate UserService
            alt Failed to get user details
                EchoServer --> Client: 9. 400 Bad Request or 500 Internal Server Error
            else User details retrieved
                EchoServer -> EchoServer: 9. Check if user is 'admin'
                alt User is 'admin'
                    EchoServer -> EchoServer: 10. Call next(c) (proceed to handler)
                else User is NOT 'admin'
                    EchoServer -> EchoServer: 10. Check if request path contains user_id parameter
                    alt user_id in path exists
                        EchoServer -> EchoServer: 11. Compare path user_id with claims.Id
                        alt user_id mismatch
                            EchoServer --> Client: 12. 401 Unauthorized (user id does not match claims id)
                        else user_id match
                            EchoServer -> EchoServer: 12. Call next(c) (proceed to handler)
                        end
                    else user_id not in path, check form values
                        EchoServer -> EchoServer: 11. Check if form value user_id exists
                        alt form user_id exists
                            EchoServer -> EchoServer: 12. Compare form user_id with claims.Id
                            alt user_id mismatch
                                EchoServer --> Client: 13. 401 Unauthorized (user id does not match claims id)
                            else user_id match
                                EchoServer -> EchoServer: 14. Call next(c) (proceed to handler)
                            end
                        else No user_id in path or form
                            EchoServer -> EchoServer: 12. Call next(c) (proceed to handler for requests not tied to specific user_id like POST /clients)
                        end
                    end
                end
            end
        end
    deactivate EchoServer
    end
end
deactivate Client
@enduml
openapi: 3.0.0
servers:
  - url: localhost:25565
info:
  description: An API used to do banking operations such as user register, withdrawl, deposit, access control, internal and external accounts transfers, account blocking and more.
  version: "1.0.0"
  title: "Simple Banking API"
  contact:
    email: julio.kobayashi@ebury.com
  license:
    name: Apache 2.0
    url: "[http://www.apache.org/licenses/LICENSE-2.0.html](http://www.apache.org/licenses/LICENSE-2.0.html)"
tags:
  - name: users
    description: User related functions
  - name: clients
    description: Client related functions
  - name: accounts
    description: Account related functions
  - name: transfers
    description: Transfer related functions
  - name: deposits
    description: Deposit related functions
  - name: withdrawals
    description: Withdrawal related functions
  - name: automaticdebits
    description: Automatic Debit related functions

paths:
  /users:
    post:
      tags:
        - users
      summary: creates user with info passed
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "201":
          description: user created sucessfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        "400":
          description: Bad input parameter
        "500":
          description: Internal Server Error

  /users/auth:
    put:
      tags:
        - users
      summary: authenticates a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                password:
                  type: string
      responses:
        "202":
          description: User Authorized
          headers:
            Authorization:
              schema:
                type: string
                description: Bearer JWT token for user authentication
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error

  /users/{user_id}:
    get:
      tags:
        - users
      summary: return data of user with ID userID
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: user returned succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
    delete:
      tags:
        - users
      summary: delete user of userID
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User deleted
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
    put:
      tags:
        - users
      summary: update a given piece of information of a certain user, no parameter except user_id is required
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "200":
          description: User updated sucessfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error

  /users/{user_id}/report:
    get:
      tags:
        - users
      summary: returns a report of the user
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Report returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserReport'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error

  /clients:
    post:
      tags:
        - clients
      summary: creates a client
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientRequest'
      responses:
        "200":
          description: client created sucessfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
        "400":
          description: bad input parameter
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error

  /clients/{client_id}:
    get:
      tags:
        - clients
      summary: return data of client with ID clientID
      parameters:
        - in: path
          name: client_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: client returned sucessfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
    delete:
      tags:
        - clients
      summary: delete client of clientID
      parameters:
        - in: path
          name: client_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Client deleted seccesfully
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
    put:
      tags:
        - clients
      summary: update a given piece of information of a certain client, no parameter except client_id is required
      parameters:
        - in: path
          name: client_id
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientRequest'
      responses:
        "200":
          description: Client updated sucessfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error

  /clients/{client_id}/report:
    get:
      tags:
        - clients
      summary: returns a report of the client
      parameters:
        - in: path
          name: client_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Report returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientReport'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
  /accounts:
    post:
      tags:
        - accounts
      summary: creates an account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountRequest'
      responses:
        "201":
          description: Account created sucessfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        "400":
          description: bad input parameter
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error

  /accounts/{account_id}:
    get:
      tags:
        - accounts
      summary: return data of account with ID accountID
      parameters:
        - in: path
          name: account_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: account returned sucessfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
    delete:
      tags:
        - accounts
      summary: delete account of accountID
      parameters:
        - in: path
          name: account_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Account Deleted
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
    put:
      tags:
        - accounts
      summary: update a given piece of information of a certain account, no parameter except account_id is required
      parameters:
        - in: path
          name: account_id
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountRequest'
      responses:
        "200":
          description: Account updated sucessfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error

  /accounts/{account_id}/report:
    get:
      tags:
        - accounts
      summary: returns a report of the account
      parameters:
        - in: path
          name: account_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Report returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountReport'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error

  /accounts/{account_id}/block:
    put:
      tags:
        - accounts
      summary: block an account
      parameters:
        - in: path
          name: account_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Account Blocked Sucesfully!
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error

  /accounts/{account_id}/unblock:
    put:
      tags:
        - accounts
      summary: unblock an account
      parameters:
        - in: path
          name: account_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Account Unblocked
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error

  /transfers:
    post:
      tags:
        - transfers
      summary: creates a transfer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transfer'
      responses:
        "200":
          description: Transfer created sucessfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transfer'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error

  /transfers/{transfer_id}:
    get:
      tags:
        - transfers
      summary: return data of transfer with ID transferID
      parameters:
        - in: path
          name: transfer_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: transfer returned sucessfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transfer'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
    delete:
      tags:
        - transfers
      summary: delete transfer of transferID
      parameters:
        - in: path
          name: transfer_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Transfer deleted
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error

  /deposits:
    post:
      tags:
        - deposits
      summary: creates a deposit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deposit'
      responses:
        "201":
          description: Deposit created sucessfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deposit'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error

  /deposits/{deposit_id}:
    get:
      tags:
        - deposits
      summary: return data of deposit with ID depositID
      parameters:
        - in: path
          name: deposit_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: deposit returned sucessfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deposit'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
    delete:
      tags:
        - deposits
      summary: delete deposit of depositID
      parameters:
        - in: path
          name: deposit_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Deposit deleted succesfully!
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error

  /withdrawals:
    post:
      tags:
        - withdrawals
      summary: creates a withdrawal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Withdrawal'
      responses:
        "201":
          description: Withdrawal created sucessfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Withdrawal'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error

  /withdrawals/{withdrawal_id}:
    get:
      tags:
        - withdrawals
      summary: return data of withdrawal with ID withdrawalID
      parameters:
        - in: path
          name: withdrawal_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: withdrawal returned sucessfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Withdrawal'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
    delete:
      tags:
        - withdrawals
      summary: delete withdrawal of withdrawalID
      parameters:
        - in: path
          name: withdrawal_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Withdrawal Deleted!
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error

  /autodebits:
    post:
      tags:
        - automaticdebits
      summary: creates a automatic debit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutomaticDebit'
      responses:
        "202":
          description: Automatic debit created sucessfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomaticDebit'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error

  /autodebits/{debit_id}:
    get:
      tags:
        - automaticdebits
      summary: return data of automatic debit with ID debit_id
      parameters:
        - in: path
          name: debit_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: automatic debit returned sucessfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomaticDebit'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
    delete:
      tags:
        - automaticdebits
      summary: delete automatic debit of debit_id
      parameters:
        - in: path
          name: debit_id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Automatic debit deleted successfully
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error

components:
  schemas:
    UserRequest:
      type: object
      properties:
        name:
          type: string
          description: Max lenght of 30 characters
        document:
          type: string
          description: Document of the user, must be CNPJ, and of 14 digits (will be validated)
        password:
          type: string
          description: User's password to be used for authentication, must not be null
    UserResponse:
      type: object
      properties:
        user_id:
          type: string
          description: Identifier of the user in the system. In POST operation it will not be used to assign the ID to the user, but to return the user ID generated by the system.
        name:
          type: string
          description: Max lenght of 30 characters
        document:
          type: string
          description: Document of the user, must be CNPJ, and of 14 digits (will be validated)
        password:
          type: string
          description: User's password to be used for authentication, must not be null
        register_date:
          type: string
          format: date-time
          description: Date when the user was registered in the system, in POST, it is not necessary to be passed, if passed won't be used (RFC3339 format)
    ClientRequest:
      type: object
      properties:
        user_id:
          type: string
          description: ID of the user that owns the client, mus not be null, and it's existence be will validated
        name:
          type: string
          description: Max lenght of 30 characters
        document:
          type: string
          description: Document of the client, must be CPF, and of 11 digits (will be validated)
    ClientResponse:
      type: object
      properties:
        client_id:
          type: string
          description: Identifier of the client in the system. In POST operation it will not be used to assign the ID to the client, but to return the client ID generated by the system.
        user_id:
          type: string
          description: ID of the user that owns the client, mus not be null, and it's existence be will validated
        name:
          type: string
          description: Max lenght of 30 characters
        document:
          type: string
          description: Document of the client, must be CPF, and of 11 digits (will be validated)
        register_date:
          type: string
          format: date-time
          description: Date when the client was registered in the system, in POST, it is not necessary, if passed won't be used (RFC3339 format)
    AccountRequest:
      type: object
      properties:
        client_id:
          type: string
          description: ID of the client that owns the account, must not be null, and it's existence will be validated 
        user_id:
          type: string
          description: ID of the user that owns the client, must not be null, it's existence will be verified
        agency_id:
          type: integer
          format: uint32
          description: Identifier of the corresponding agency where the account is based, must not be null 
    AccountResponse:
      type: object
      properties:
        account_id:
          type: string
          description: Identifier of the account in the system. In POST operation it will not be used to assign the ID to the account, but to return the account ID generated by the system.
        client_id:
          type: string
          description: ID of the client that owns the account, must not be null, and it's existence will be validated 
        user_id:
          type: string
          description: ID of the user that owns the client, must not be null, it's existence will be verified
        agency_id:
          type: integer
          format: uint32
          description: Identifier of the corresponding agency where the account is based, must not be null 
        register_date:
          type: string
          format: date-time
          description: Date when tha account was registered, generated in the system, won't be used if passed (RFC3339 format)
        balance:
          type: number
          format: float64
          description: Balance of the account, on POST, do not pass this parameter. If passed will be ignored and set to 0.0 
        status:
          type: string
          description: Value indicating if the account is active or not, on POST, default is "active" (possible values "blocked", "active")
    Transfer:
      type: object
      properties:
        transfer_id:
          type: string
          description: Identifier of the transfer in the system. In POST, the system will generate this ID and return, if passed wont't be used!
        user_id:
          type: string
          description: ID of the user initiating the transfer, must not be null, and its existence will be validated.
        account_id:
          type: string
          description: ID of the account that is sending the transfer, must not be null, and it's existence will be validated
        account_to:
          type: string
          description: ID of the account that is receiving the transfer ,must not be null, and it's existence will be validated
        value:
          type: number
          format: float64
          description: Ammount of money to be transfered, must not be null, 0.0 or negative. The account_id will be verified of the value's existence in it's balance.
        register_date:
          type: string
          format: date-time
          description: Date when the transfer was registered, generated in the system, wont't be used if passed. (RFC3339 format)
    Deposit:
      type: object
      properties:
        deposit_id:
          type: string
          description: Identifier of the deposit in the system. In POST, the system will return this value, if passed, won't be used!
        account_id:
          type: string
          description: ID of the account that is receiving the deposit, must not be null, and it's existence will be validated
        client_id:
          type: string
          description: ID of the client that owns the account, must not be null, and it's existence, status and equality to the account registered clientID will be verified
        user_id:
          type: string
          description: ID of the user that owns the client, must not be null, and it's existence will be validated, as well as it's ownership of the client
        agency_id:
          type: integer
          format: uint32
          description: ID of the agency where the account is based, must not be null and will be verified in deposit process
        deposit:
          type: number
          format: float64
          description: Ammount of money to be deposited, must not be null, 0.0 or negative. 
        deposit_date:
          type: string
          format: date-time
          description: Date when the deposit was registered, generated in the system and will be returned, if passed won't be used! (RFC3339 format)
    Withdrawal:
      type: object
      properties:
        withdrawal_id:
          type: string
          description: Identifier of the withdrawal in the system. In POST, the system will generate and return this ID, if passed won't be used!
        account_id:
          type: string
          description: ID of the account that is having the ammount withdrawn, must not be null and will be validated
        client_id:
          type: string
          description: ID of the client that owns the account, must not be null, and it's existence, status and equality to the account registered clientID will be validated
        agency_id:
          type: integer
          format: uint32
          description: ID of the agency where the account is based, must not be null, and will be validated in withdrawal processs
        withdrawal:
          type: number
          format: float64
          description: Ammount of money to be withdrawn, must not be null, 0.0 or negative. The account with account_id will be verified of the existence of this value in it's balance
        withdrawal_date:
          type: string
          format: date-time
          description: Date when the withdrawal was registered, generated in the system, wont'be used if passed! (RFC3339 format)
        status:
          type: boolean
          description: Value indicating if the withdrawal was succesfull or not, will be set on POST and never changed
    AutomaticDebit:
      type: object
      properties:
        debit_id:
          type: string
          description: Identifier of the automatic debit in the system. In POST, the system will generate and return this ID, if passed won't be used!
        account_id:
          type: string
          description: ID of the account that is having the automatic debit, must not be null, and it's existence will be validated!
        client_id:
          type: string
          description: ID of the client that owns the account, must not be null, and it's existence, status and equality to the account registered clientID will be validated
        agency_id:
          type: integer
          format: uint32
          description: ID of the agency where the account is based, muts not be null, and will be validated in automatic debit process
        value:
          type: number
          format: float64
          description: Ammount of money to be debited, must not be null, 0.0 or negative. The account with account_id, will be verified of the existence of this value in it's balance upon debit 
        debit_day:
          type: integer
          format: uint16
          description: Day of the month when the debit will be made, must not be null, and must be between 1 and 31
        status:
          type: boolean
          description: Value indicating if the automatic debit is active or not, in POST, will be set for true
        expiration_date:
          type: string
          format: date-time
          description: Date when the automatic debit will be expired, must not be null, and will be validated in automatic debit process or checking (format 2006-01-02T15:04:05+07:00 (RFC3339)))
        register_date:
          type: string
          format: date-time
          description: Date whant the automatic debit was registered, generated in the system, wont't be used if passed in POST (RFC3339 format)
    UserReport:
      type: object
      properties:
        user_id:
          type: string
          description: Identifier of the user in the system
        name:
          type: string
          description: Name of the user, will be returned
        document:
          type: string
          description: Document of the user, will be returned
        register_date:
          type: string
          format: date-time
          description: Date when the user was registered in the system, will be returned (RFC3339 format)
        status:
          type: boolean
          description: Value indicating if the user is active or not
        clients:
          type: array
          items:
            $ref: '#/components/schemas/ClientResponse'
        report_date:
          type: string
          format: date-time
          description: Date when the report was generated (RFC3339 format)
    ClientReport:
      type: object
      properties:
        client_id:
          type: string
          description: Identifier of the client in the system, the report is referrering to this client
        user_id:
          type: string
          description: ID of the user that owns the client
        name:
          type: string
          description: Name of the client
        document:
          type: string
          description: Document of the client
        register_date:
          type: string
          format: date-time
          description: Date when the client was registered in the system (RFC3339 format)
        status:
          type: boolean
          description: Value indicating if the client is active or not
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/AccountResponse'
        report_date:
          type: string
          format: date-time
          description: Date when the report was generated (RFC3339 format)
    AccountReport:
      type: object
      properties:
        account_id:
          type: string
          description: The ID of the account which the report is referring to
        client_id:
          type: string
          description: ID of the client that owns the account
        agency_id:
          type: integer
          format: uint32
          description: ID the agency where the account is based
        balance:
          type: number
          format: float64
          description: Balance of the account, ammount of money in the account
        register_date:
          type: string
          format: date-time
          description: Date when the account was registered in the system (RFC3339 format)
        status:
          type: boolean
          description: Value indicating if the account is active or not
        transfers:
          type: array
          items:
            $ref: '#/components/schemas/Transfer'
        deposits:
          type: array
          items:
            $ref: '#/components/schemas/Deposit'
        withdrawals:
          type: array
          items:
            $ref: '#/components/schemas/Withdrawal'
        automatic_debits:
          type: array
          items:
            $ref: '#/components/schemas/AutomaticDebit'
        report_date:
          type: string
          format: date-time
          description: Date when the report was generated (RFC3339 format)
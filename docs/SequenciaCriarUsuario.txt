@startuml
actor Owner
boundary "UserHandlers" as UserHandlers
control "CreateService" as CreateUserControl
entity "user.userFirestore" as UserFirestore
database "FirestoreDB" as DB
control "GetService" as GetUserControl

Owner -> UserHandlers : POST /users (userInfo)
activate UserHandlers
UserHandlers -> UserHandlers : UserPostHandler(echo.Context)
UserHandlers -> CreateUserControl : CreateUser(&userInfo)
activate CreateUserControl
UserHandlers -> CreateUserControl : NewCreateService(*firestore.Client)
CreateUserControl -> UserHandlers : service.ServiceCreate
UserHandlers -> CreateUserControl : CreateUser(*user.UserRequest)
activate UserFirestore
CreateUserControl -> UserFirestore : Create(user.UserRequest)
activate DB
UserFirestore --> DB : .Collection().Add()
DB --> UserFirestore : firestore.DocumentoRef, nil
deactivate DB
UserFirestore --> CreateUserControl : &docRef.ID, nil
deactivate UserFirestore

CreateUserControl -> GetUserControl : NewGetUser(userID)
activate GetUserControl
GetUserControl -> CreateUserControl : service.GetService
CreateUserControl -> GetUserControl : User(userID)
GetUserControl -> UserFirestore : Get(id)
activate UserFirestore 
UserFirestore -> DB : .Collection().Doc().Get()
activate DB
DB -> UserFirestore : firestore.DocumentSnapshot
deactivate DB
UserFirestore -> GetUserControl : user.UserResponse
deactivate UserFirestore
GetUserControl --> CreateUserControl : user.UserResponse
deactivate GetUserControl
CreateUserControl --> UserHandlers : userResponse, nil
deactivate CreateUserControl
UserHandlers -> Owner : HTTP 201 Created (userResponse)
deactivate UserHandlers

@enduml
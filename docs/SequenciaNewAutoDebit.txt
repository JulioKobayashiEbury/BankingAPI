@startuml
actor Owner
boundary "AccountHandler" as AccountDebitBoundary
boundary "userAuthorization" as UserAuthorizationBoundaryFunc
control "Authorize" as AuthorizeControl
control "ProcessNewAutomaticDebit" as ProcessAutoDebitControl
entity "automaticdebit.autoDebitFirestore" as AutoDebitFirestoreEntity
database "FirestoreDB" as DB

Owner -> AccountDebitBoundary : PUT /accounts/:account_id/debit (newAutoDebit)
activate AccountDebitBoundary
AccountDebitBoundary -> UserAuthorizationBoundaryFunc : userAuthorization(&c)
activate UserAuthorizationBoundaryFunc
UserAuthorizationBoundaryFunc -> AuthorizeControl : Authorize(cookie)
activate AuthorizeControl
AuthorizeControl --> UserAuthorizationBoundaryFunc : claims, nil, nil
deactivate AuthorizeControl
UserAuthorizationBoundaryFunc --> AccountDebitBoundary : &userID, nil
deactivate UserAuthorizationBoundaryFunc

AccountDebitBoundary -> ProcessAutoDebitControl : ProcessNewAutomaticDebit(&newAutoDebit)
activate ProcessAutoDebitControl
ProcessAutoDebitControl -> ProcessAutoDebitControl : isValidDate(newAutoDebit.Expiration_date)
ProcessAutoDebitControl -> AutoDebitFirestoreEntity : Create(newAutoDebit)
activate AutoDebitFirestoreEntity
AutoDebitFirestoreEntity -> DB : .Collection().Add()
activate DB
DB --> AutoDebitFirestoreEntity : firestore.DocumentRef
deactivate DB
AutoDebitFirestoreEntity --> ProcessAutoDebitControl : &responseID, nil
deactivate AutoDebitFirestoreEntity

ProcessAutoDebitControl -> AutoDebitFirestoreEntity : Get(&responseID)
activate AutoDebitFirestoreEntity
AutoDebitFirestoreEntity -> DB : .Collection().Doc().Get()
activate DB
DB --> AutoDebitFirestoreEntity : firestore.DocumentSnapshot
deactivate DB
AutoDebitFirestoreEntity --> ProcessAutoDebitControl : autoDebitResponse, nil
deactivate AutoDebitFirestoreEntity

ProcessAutoDebitControl --> AccountDebitBoundary : &autoDebitResponse, nil
deactivate ProcessAutoDebitControl
AccountDebitBoundary -> Owner : HTTP 202 Accepted
deactivate AccountDebitBoundary

@enduml
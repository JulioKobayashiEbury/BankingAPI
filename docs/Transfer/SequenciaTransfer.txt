@startuml
title Process New Transfer - PUT /accounts/:account_id/transfer

actor Requester
boundary AccountPutTransferHandler <<accountHandler.go>>
control AuthorizeService <<serviceAuthorize.go>>
control TransferService <<serviceTransfer.go>>
control AccountService <<serviceAccount.go>>
entity TransferFirestore <<model/transfer/firestore.go>>

activate Requester
Requester -> AccountPutTransferHandler : PUT /accounts/:account_id/transfer (Body: TransferRequest)
activate AccountPutTransferHandler
AccountPutTransferHandler -> AuthorizeService : Authorize(Cookie)
activate AuthorizeService
AuthorizeService --> AccountPutTransferHandler : Claims / Error
deactivate AuthorizeService
alt Authorization Failed
    AccountPutTransferHandler --> Requester : HTTP Error Response
else Authorization Succeeded
    
    AccountPutTransferHandler -> TransferService : ProcessNewTransfer()
    activate TransferService
    
    TransferService -> AccountService : Account(&transferRequest.Account_to)
    activate AccountService
    AccountService --> TransferService : accountToData / Error
    alt Get AccountTo Failed
        TransferService --> AccountPutTransferHandler : Error
        AccountPutTransferHandler --> Requester : HTTP Error Response
    else Get AccountTo Succeeded
        TransferService -> AccountService : Account(&transferRequest.Account_id)
        AccountService --> TransferService : accountFromData / Error
        alt Get AccountFrom Failed
            TransferService --> AccountPutTransferHandler : Error
            AccountPutTransferHandler --> Requester : HTTP Error Response
        else Get AccountFrom Succeeded
            TransferService -> TransferFirestore : Create(transferRequest)
            activate TransferFirestore
            TransferFirestore --> TransferService : transferID / Error
            deactivate TransferFirestore
            alt Create Transfer Record Failed
                TransferService --> AccountPutTransferHandler : Error
                AccountPutTransferHandler --> Requester : HTTP Error Response
            else Create Transfer Record Succeeded
                TransferService -> AccountService : Update(accountTo with updated balance)
                AccountService --> TransferService : nil / Error
                alt Update AccountTo Failed (Rollback Create Transfer)
                    TransferService -> TransferFirestore : Delete(transferID)
                    activate TransferFirestore
                    TransferFirestore --> TransferService
                    deactivate TransferFirestore
                    TransferService --> AccountPutTransferHandler : Error
                    AccountPutTransferHandler --> Requester : HTTP Error Response
                else Update AccountTo Succeeded
                    TransferService -> AccountService : Update(accountFrom with updated balance)
                    AccountService --> TransferService : nil / Error
                    alt Update AccountFrom Failed (Rollback AccountTo and Create Transfer)
                        TransferService -> AccountService : Update(accountTo with original balance) 'Rollback AccountTo
                        AccountService --> TransferService
                        TransferService -> TransferFirestore : Delete(transferID)
                        activate TransferFirestore
                        TransferFirestore --> TransferService
                        deactivate TransferFirestore
                        TransferService --> AccountPutTransferHandler : Error
                        AccountPutTransferHandler --> Requester : HTTP Error Response
                    else Update AccountFrom Succeeded
                        TransferService --> AccountPutTransferHandler : transferID
                        AccountPutTransferHandler --> Requester : HTTP 200 OK (transferID)
                    end
                    
                end
            end
        end
    end
    deactivate AccountService    
    deactivate TransferService
end
deactivate AccountPutTransferHandler
deactivate Requester
@enduml
@startuml
title User Authentication - POST /auth/token

actor Requester
boundary AuthHandler <<authenticationHandler.go>>
control AuthService <<serviceAuthenticate.go>>
entity UserFirestore <<model/user/firestore.go>>

Requester -> AuthHandler : 1. POST /auth/token (Body: User_id, Password)
activate AuthHandler

AuthHandler -> AuthService : 2. Authenticate(&userInfo.User_id, &userInfo.Password, "users")
activate AuthService
AuthService -> UserFirestore : 3. Get(&userInfo.User_id)
activate UserFirestore
UserFirestore -->> AuthService : 4. userAuthData / Error
deactivate UserFirestore

alt Get User Failed or User Not Found
    AuthService -->> AuthHandler : 5. false, Error
    AuthHandler -->> Requester : 6. HTTP Error Response
else Get User Succeeded
    AuthService -> AuthService : 5. Compare userInfo.Password with userAuthData.Password
    alt Password Mismatch
        AuthService -->> AuthHandler : 7. false, Error (Password is wrong)
        AuthHandler -->> Requester : 8. HTTP Error Response (BadRequest)
    else Password Match
        AuthService -->> AuthHandler : 7. true, nil
        
        AuthHandler -> AuthService : 8. GenerateToken(&userInfo.User_id)
        ' AuthService was already active for Authenticate, can reuse or reactivate for GenerateToken
        ' For clarity, let's assume GenerateToken is a distinct activation phase if preferred
        AuthService -->> AuthHandler : 9. tokenString / Error
        
        alt Token Generation Failed
            AuthHandler -->> Requester : 10. HTTP Error Response
        else Token Generation Succeeded
            AuthHandler -> AuthHandler : 10. c.Response().Header().Set(, Bearer+tokenString)
            AuthHandler -->> Requester : 11. HTTP 200 OK (Message: User Authorized)
        end
    end
    deactivate AuthService
end
deactivate AuthHandler
@enduml 
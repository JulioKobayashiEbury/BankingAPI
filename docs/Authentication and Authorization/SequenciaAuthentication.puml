@startuml
title User Authentication - PUT /users/auth

actor Requester
boundary UserAuthHandler <<userHandler.go>>
control AuthService <<serviceAuthenticate.go>>
entity UserFirestore <<model/user/firestore.go>>

Requester -> UserAuthHandler : 1. PUT /users/auth (Body: User_id, Password)
activate UserAuthHandler

UserAuthHandler -> AuthService : 2. Authenticate(&userInfo.User_id, &userInfo.Password, "users")
activate AuthService
AuthService -> UserFirestore : 3. Get(&userInfo.User_id)
activate UserFirestore
UserFirestore -->> AuthService : 4. userAuthData / Error
deactivate UserFirestore

alt Get User Failed or User Not Found
    AuthService -->> UserAuthHandler : 5. false, Error
    UserAuthHandler -->> Requester : 6. HTTP Error Response
else Get User Succeeded
    AuthService -> AuthService : 5. Compare userInfo.Password with userAuthData.Password
    alt Password Mismatch
        AuthService -->> AuthService : 6. false
        AuthService -->> UserAuthHandler : 7. false, Error (Password is wrong / Credentials not valid)
        UserAuthHandler -->> Requester : 8. HTTP Error Response (StatusUnauthorized or BadRequest)
    else Password Match
        AuthService -->> AuthService : 6. true
        AuthService -->> UserAuthHandler : 7. true, nil
        
        UserAuthHandler -> AuthService : 8. GenerateToken(&userInfo.User_id)
        ' AuthService was already active for Authenticate, can reuse or reactivate for GenerateToken
        ' For clarity, let's assume GenerateToken is a distinct activation phase if preferred
        AuthService -->> UserAuthHandler : 9. cookie_ptr / Error
        
        alt Token Generation Failed
            UserAuthHandler -->> Requester : 10. HTTP Error Response
        else Token Generation Succeeded
            UserAuthHandler -> UserAuthHandler : 10. c.SetCookie(cookie_ptr)
            UserAuthHandler -->> Requester : 11. HTTP 202 Accepted (Message: User Authorized)
        end
    end
    deactivate AuthService
end
deactivate UserAuthHandler
@enduml 